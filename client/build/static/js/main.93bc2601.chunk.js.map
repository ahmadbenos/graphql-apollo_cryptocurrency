{"version":3,"sources":["components/Header.js","components/CoinItem.js","components/Coins.js","components/CoinDetails.js","App.js","index.js"],"names":["Header","className","href","class","arrowColor","change","CoinItem","coin","name","symbol","price_usd","percent_change_24h","id","style","position","left","color","toLocaleString","to","COINS_QUERY","gql","Coins","useQuery","loading","error","data","RenderList","console","log","coins","map","Math","random","COIN_QUERY","CoinDetails","match","params","variables","Number","tsupply","msupply","volume24","market_cap_usd","client","ApolloClient","uri","cache","InMemoryCache","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93bc2601.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <h1 className=\"text-center mt-2\">Crypto Prices</h1>\r\n      <p className=\"text-center\">\r\n        React, GraphQL, Apollo, and coinlore(API) project\r\n      </p>\r\n      <p className=\"text-center\">\r\n        <a href=\"https://github.com/ahmadbenos/graphql-apollo_cryptocurrency\">\r\n          By Ahmad Tarabein\r\n          <span>\r\n            <i class=\"fab fa-github\"></i>\r\n          </span>\r\n        </a>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// function to check the price to determine arrow color\r\nexport function arrowColor(change) {\r\n  if (change > 0) return \"green\";\r\n  if (change < 0) return \"red\";\r\n  return \"white\";\r\n}\r\n\r\nconst CoinItem = ({\r\n  coin: { name, symbol, price_usd, percent_change_24h, id },\r\n}) => {\r\n  return (\r\n    <div className=\"card text-white bg-primary mb-3\">\r\n      <div className=\"card-header\">\r\n        {symbol}\r\n        <span\r\n          style={{\r\n            position: \"relative\",\r\n            left: \"3px\",\r\n            color: arrowColor(percent_change_24h),\r\n          }}\r\n        >\r\n          <i\r\n            className={`fas fa-lg ${\r\n              percent_change_24h < 0 ? \"fa-caret-down\" : \"fa-caret-up\"\r\n            }`}\r\n          ></i>\r\n          {percent_change_24h}%\r\n        </span>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-10\">\r\n            <h4 className=\"card-title\">{name}</h4>\r\n            <p className=\"card-text\">${price_usd.toLocaleString()}</p>\r\n          </div>\r\n          <div className=\"col-md-2 mt-1\">\r\n            <Link to={`/details/${id}`} className=\"btn btn-outline-info\">\r\n              Details\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoinItem;\r\n","import React from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport CoinItem from \"./CoinItem\";\r\n\r\nconst COINS_QUERY = gql`\r\n  query CoinsQuery {\r\n    coins {\r\n      id\r\n      name\r\n      symbol\r\n      price_usd\r\n      percent_change_24h\r\n    }\r\n  }\r\n`;\r\n\r\nconst Coins = () => {\r\n  const { loading, error, data } = useQuery(COINS_QUERY);\r\n  console.log(data);\r\n  function RenderList() {\r\n    if (loading) return <h4>Loading...</h4>;\r\n    if (error) {\r\n      console.log(error);\r\n      return <p>An error occured!</p>;\r\n    }\r\n    console.log(data.coins);\r\n    return data.coins.map((coin) => (\r\n      <CoinItem key={Math.random()} coin={coin} />\r\n    ));\r\n  }\r\n  return (\r\n    <div>\r\n      <h2>All Coins</h2>\r\n      <hr />\r\n      <RenderList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Coins;\r\n","import React from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { arrowColor } from \"./CoinItem\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst COIN_QUERY = gql`\r\n  query CoinQuery($id: Int!) {\r\n    coin(id: $id) {\r\n      name\r\n      symbol\r\n      tsupply\r\n      price_usd\r\n      percent_change_24h\r\n      msupply\r\n      volume24\r\n      market_cap_usd\r\n    }\r\n  }\r\n`;\r\n\r\nconst CoinDetails = ({ match }) => {\r\n  const { id } = match.params;\r\n  const { loading, error, data } = useQuery(COIN_QUERY, {\r\n    variables: {\r\n      id: Number(id),\r\n    },\r\n  });\r\n  if (loading) return <h4>Loading...</h4>;\r\n  if (error) return <p>An error has occured</p>;\r\n  if (data) console.log(data);\r\n  const {\r\n    name,\r\n    symbol,\r\n    tsupply,\r\n    price_usd,\r\n    percent_change_24h,\r\n    msupply,\r\n    volume24,\r\n    market_cap_usd,\r\n  } = data.coin;\r\n\r\n  return (\r\n    <>\r\n      <h3>{name}</h3>\r\n      <div className=\"card text-white bg-primary mb-3\">\r\n        <div className=\"card-body\">\r\n          <h4 className=\"card-title\">${price_usd}</h4>\r\n          <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item bg-primary\">\r\n              Market Cap: ${market_cap_usd.toLocaleString()}\r\n            </li>\r\n            <li className=\"list-group-item bg-primary\">\r\n              Price Change 24h:{\" \"}\r\n              <span style={{ color: arrowColor(percent_change_24h) }}>\r\n                {percent_change_24h}%\r\n              </span>\r\n            </li>\r\n            <li className=\"list-group-item bg-primary\">\r\n              Volume: ${volume24.toLocaleString()}\r\n            </li>\r\n            <li className=\"list-group-item bg-primary\">\r\n              Total Supply:{\" \"}\r\n              {msupply == 0 ? \"Unlimited\" : Number(msupply).toLocaleString()}\r\n            </li>\r\n            <li className=\"list-group-item bg-primary\">\r\n              Circulating Supply: {Number(tsupply).toLocaleString()}\r\n            </li>\r\n            <li className=\"list-group-item bg-primary\">Symbol: {symbol}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <Link to=\"/\" className=\"btn btn-outline-primary mt-3\">\r\n        Back\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CoinDetails;\r\n","import \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport Coins from \"./components/Coins\";\nimport CoinDetails from \"./components/CoinDetails\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <Header />\n          <Route path=\"/\" exact component={Coins} />\n          <Route path=\"/details/:id\" component={CoinDetails} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}